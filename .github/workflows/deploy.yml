name: Deploy Ngx service-user-metadata

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Setup Node (cache npm)
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'
          scope: '@tmdjr'
          cache: 'npm'

      - name: Generate OpenAPI spec
        env:
          GENERATE_OPENAPI: 'true'
        run: |
          npm install
          npm run build
          npm run openapi

      - name: Build contracts (service-user-metadata)
        run: |
          cd contracts/service-user-metadata
          npm install
          npm run gen
          npm run build

      - name: Configure npm auth
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'
          scope: '@tmdjr'
          always-auth: true

      - name: Publish contracts to NPM (service-user-metadata)
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          cd contracts/service-user-metadata

          # Deterministic version: "<major>.<minor>.<github.run_number>"
          node - <<'NODE'
          const fs = require('fs');
          const pkgPath = './package.json';
          const pkg = JSON.parse(fs.readFileSync(pkgPath, 'utf8'));
          const [maj, min] = String(pkg.version).split('.');
          const uniquePatch = process.env.GITHUB_RUN_NUMBER || '0';
          pkg.version = `${maj}.${min}.${uniquePatch}`;
          fs.writeFileSync(pkgPath, JSON.stringify(pkg, null, 2) + '\n');
          console.log('Publishing version', pkg.version);
          NODE

          npm publish --access public

      - name: Upload OpenAPI artifact
        uses: actions/upload-artifact@v4
        with:
          name: service-user-metadata-openapi
          path: openapi.json

      - name: Copy to Droplet
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.DROPLET_IP }}
          username: root
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: '.'
          target: '/opt/ngx-nestjs-services/service-user-metadata'

      - name: SSH and Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DROPLET_IP }}
          username: root
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /opt/ngx-nestjs-services/service-user-metadata

            echo "🌐 Ensuring shared Docker network exists..."
            docker network ls | grep -q "ngx-net" || docker network create ngx-net

            echo "🔑 Writing .env from GitHub secrets..."
            echo "PORT=${{ secrets.PORT }}" > .env
            echo "AUTH_BASE_URL=${{ secrets.AUTH_BASE_URL }}" >> .env
            echo "MONGODB_URI=${{ secrets.MONGODB_URI }}" >> .env

            echo "🔗 Connecting peer services to ngx-net (ignore errors if not present)..."
            docker network connect ngx-net ngx-workshop-bff 2>/dev/null || true
            docker network connect ngx-net ngx-auth-service 2>/dev/null || true

            echo "🚀 Building and starting container..."
            docker build -t service-user-metadata .
            docker stop service-user-metadata || true
            docker rm service-user-metadata || true
            docker run -d \
              --name service-user-metadata \
              --env-file .env \
              --network ngx-net \
              --restart unless-stopped \
              -p secrets.PORT:secrets.PORT \
              service-user-metadata
